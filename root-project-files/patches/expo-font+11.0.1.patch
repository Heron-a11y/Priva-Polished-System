diff --git a/node_modules/expo-font/android/.project b/node_modules/expo-font/android/.project
new file mode 100644
index 0000000..c751b18
--- /dev/null
+++ b/node_modules/expo-font/android/.project
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>expo-font</name>
+	<comment>Project expo-font created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1759581207279</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/expo-font/android/bin/.project b/node_modules/expo-font/android/bin/.project
new file mode 100644
index 0000000..c751b18
--- /dev/null
+++ b/node_modules/expo-font/android/bin/.project
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>expo-font</name>
+	<comment>Project expo-font created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1759581207279</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/expo-font/android/bin/build.gradle b/node_modules/expo-font/android/bin/build.gradle
new file mode 100644
index 0000000..786924d
--- /dev/null
+++ b/node_modules/expo-font/android/bin/build.gradle
@@ -0,0 +1,88 @@
+apply plugin: 'com.android.library'
+apply plugin: 'kotlin-android'
+apply plugin: 'maven-publish'
+
+group = 'host.exp.exponent'
+version = '11.0.1'
+
+buildscript {
+  def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
+  if (expoModulesCorePlugin.exists()) {
+    apply from: expoModulesCorePlugin
+    applyKotlinExpoModulesCorePlugin()
+  }
+
+  // Simple helper that allows the root project to override versions declared by this library.
+  ext.safeExtGet = { prop, fallback ->
+    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
+  }
+
+  // Ensures backward compatibility
+  ext.getKotlinVersion = {
+    if (ext.has("kotlinVersion")) {
+      ext.kotlinVersion()
+    } else {
+      ext.safeExtGet("kotlinVersion", "1.6.10")
+    }
+  }
+
+  repositories {
+    mavenCentral()
+  }
+
+  dependencies {
+    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${getKotlinVersion()}")
+  }
+}
+
+// Creating sources with comments
+task androidSourcesJar(type: Jar) {
+  archiveClassifier.set('sources')
+  from android.sourceSets.main.java.srcDirs
+}
+
+afterEvaluate {
+  publishing {
+    publications {
+      release(MavenPublication) {
+        from components.release
+        // Add additional sourcesJar to artifacts
+        artifact(androidSourcesJar)
+      }
+    }
+    repositories {
+      maven {
+        url = mavenLocal().url
+      }
+    }
+  }
+}
+
+android {
+  compileSdkVersion safeExtGet("compileSdkVersion", 31)
+
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_11
+    targetCompatibility JavaVersion.VERSION_11
+  }
+
+  kotlinOptions {
+    jvmTarget = JavaVersion.VERSION_11.majorVersion
+  }
+
+  defaultConfig {
+    minSdkVersion safeExtGet("minSdkVersion", 21)
+    targetSdkVersion safeExtGet("targetSdkVersion", 31)
+    versionCode 29
+    versionName "11.0.1"
+  }
+  lintOptions {
+    abortOnError false
+  }
+}
+
+dependencies {
+  implementation project(':expo-modules-core')
+
+  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${getKotlinVersion()}"
+}
diff --git a/node_modules/expo-font/android/bin/src/main/AndroidManifest.xml b/node_modules/expo-font/android/bin/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..d2029b5
--- /dev/null
+++ b/node_modules/expo-font/android/bin/src/main/AndroidManifest.xml
@@ -0,0 +1,5 @@
+
+<manifest package="expo.modules.font">
+
+</manifest>
+  
diff --git a/node_modules/expo-font/android/bin/src/main/java/expo/modules/font/FontLoaderModule.kt b/node_modules/expo-font/android/bin/src/main/java/expo/modules/font/FontLoaderModule.kt
new file mode 100644
index 0000000..b8acb94
--- /dev/null
+++ b/node_modules/expo-font/android/bin/src/main/java/expo/modules/font/FontLoaderModule.kt
@@ -0,0 +1,78 @@
+// Copyright 2015-present 650 Industries. All rights reserved.
+
+package expo.modules.font
+
+import android.content.Context
+import android.graphics.Typeface
+import android.net.Uri
+
+import expo.modules.core.ExportedModule
+import expo.modules.core.ModuleRegistry
+import expo.modules.core.ModuleRegistryDelegate
+import expo.modules.core.interfaces.ExpoMethod
+import expo.modules.core.Promise
+
+import expo.modules.interfaces.font.FontManagerInterface
+import expo.modules.interfaces.constants.ConstantsInterface
+
+import java.io.File
+import java.lang.Exception
+
+private const val ASSET_SCHEME = "asset://"
+private const val EXPORTED_NAME = "ExpoFontLoader"
+
+class FontLoaderModule(context: Context) : ExportedModule(context) {
+  private val moduleRegistryDelegate: ModuleRegistryDelegate = ModuleRegistryDelegate()
+
+  private inline fun <reified T> moduleRegistry() = moduleRegistryDelegate.getFromModuleRegistry<T>()
+
+  override fun onCreate(moduleRegistry: ModuleRegistry) {
+    moduleRegistryDelegate.onCreate(moduleRegistry)
+  }
+
+  override fun getName(): String {
+    return EXPORTED_NAME
+  }
+
+  @ExpoMethod
+  fun loadAsync(fontFamilyName: String, localUri: String, promise: Promise) {
+    try {
+      // TODO: remove Expo references
+      // https://github.com/expo/expo/pull/4652#discussion_r296630843
+      val prefix = if (isScoped) {
+        "ExpoFont-"
+      } else {
+        ""
+      }
+
+      // TODO(nikki): make sure path is in experience's scope
+      val typeface: Typeface = if (localUri.startsWith(ASSET_SCHEME)) {
+        Typeface.createFromAsset(
+          context.assets, // Also remove the leading slash.
+          localUri.substring(ASSET_SCHEME.length + 1)
+        )
+      } else {
+        Typeface.createFromFile(File(Uri.parse(localUri).path))
+      }
+
+      val fontManager: FontManagerInterface? by moduleRegistry()
+      if (fontManager == null) {
+        promise.reject("E_NO_FONT_MANAGER", "There is no FontManager in module registry. Are you sure all the dependencies of expo-font are installed and linked?")
+        return
+      }
+
+      fontManager!!.setTypeface(prefix + fontFamilyName, Typeface.NORMAL, typeface)
+      promise.resolve(null)
+    } catch (e: Exception) {
+      promise.reject("E_UNEXPECTED", "Font.loadAsync unexpected exception: " + e.message, e)
+    }
+  }
+
+  // If there's no constants module, or app ownership isn't "expo", we're not in Expo Client.
+  private val isScoped: Boolean
+    get() {
+      val constantsModule: ConstantsInterface? by moduleRegistry()
+      // If there's no constants module, or app ownership isn't "expo", we're not in Expo Client.
+      return constantsModule != null && "expo" == constantsModule!!.appOwnership
+    }
+}
diff --git a/node_modules/expo-font/android/bin/src/main/java/expo/modules/font/FontLoaderPackage.kt b/node_modules/expo-font/android/bin/src/main/java/expo/modules/font/FontLoaderPackage.kt
new file mode 100644
index 0000000..9fb41d7
--- /dev/null
+++ b/node_modules/expo-font/android/bin/src/main/java/expo/modules/font/FontLoaderPackage.kt
@@ -0,0 +1,11 @@
+package expo.modules.font
+
+import android.content.Context
+import expo.modules.core.BasePackage
+import expo.modules.core.ExportedModule
+
+class FontLoaderPackage : BasePackage() {
+  override fun createExportedModules(context: Context): List<ExportedModule> {
+    return listOf<ExportedModule>(FontLoaderModule(context))
+  }
+}
diff --git a/node_modules/expo-font/android/build.gradle b/node_modules/expo-font/android/build.gradle
index 197fbb8..786924d 100644
--- a/node_modules/expo-font/android/build.gradle
+++ b/node_modules/expo-font/android/build.gradle
@@ -37,7 +37,7 @@ buildscript {
 
 // Creating sources with comments
 task androidSourcesJar(type: Jar) {
-  classifier = 'sources'
+  archiveClassifier.set('sources')
   from android.sourceSets.main.java.srcDirs
 }
 
