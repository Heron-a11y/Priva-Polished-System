diff --git a/node_modules/expo-manifests/android/.project b/node_modules/expo-manifests/android/.project
new file mode 100644
index 0000000..68f36af
--- /dev/null
+++ b/node_modules/expo-manifests/android/.project
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>expo-manifests</name>
+	<comment>Project expo-manifests created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1759581207292</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/expo-manifests/android/bin/.project b/node_modules/expo-manifests/android/bin/.project
new file mode 100644
index 0000000..68f36af
--- /dev/null
+++ b/node_modules/expo-manifests/android/bin/.project
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>expo-manifests</name>
+	<comment>Project expo-manifests created by Buildship.</comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.jdt.core.javabuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.jdt.core.javanature</nature>
+		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>
+	</natures>
+	<filteredResources>
+		<filter>
+			<id>1759581207292</id>
+			<name></name>
+			<type>30</type>
+			<matcher>
+				<id>org.eclipse.core.resources.regexFilterMatcher</id>
+				<arguments>node_modules|\.git|__CREATED_BY_JAVA_LANGUAGE_SERVER__</arguments>
+			</matcher>
+		</filter>
+	</filteredResources>
+</projectDescription>
diff --git a/node_modules/expo-manifests/android/bin/build.gradle b/node_modules/expo-manifests/android/bin/build.gradle
new file mode 100644
index 0000000..7343893
--- /dev/null
+++ b/node_modules/expo-manifests/android/bin/build.gradle
@@ -0,0 +1,109 @@
+apply plugin: 'com.android.library'
+apply plugin: 'kotlin-android'
+apply plugin: 'maven-publish'
+
+group = 'host.exp.exponent'
+version = '0.4.0'
+
+buildscript {
+  def expoModulesCorePlugin = new File(project(":expo-modules-core").projectDir.absolutePath, "ExpoModulesCorePlugin.gradle")
+  if (expoModulesCorePlugin.exists()) {
+    apply from: expoModulesCorePlugin
+    applyKotlinExpoModulesCorePlugin()
+  }
+
+  // Simple helper that allows the root project to override versions declared by this library.
+  ext.safeExtGet = { prop, fallback ->
+    rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
+  }
+
+  // Ensures backward compatibility
+  ext.getKotlinVersion = {
+    if (ext.has("kotlinVersion")) {
+      ext.kotlinVersion()
+    } else {
+      ext.safeExtGet("kotlinVersion", "1.6.10")
+    }
+  }
+
+  repositories {
+    mavenCentral()
+  }
+
+  dependencies {
+    classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${getKotlinVersion()}")
+  }
+}
+
+// Creating sources with comments
+task androidSourcesJar(type: Jar) {
+  classifier = 'sources'
+  from android.sourceSets.main.java.srcDirs
+}
+
+afterEvaluate {
+  publishing {
+    publications {
+      release(MavenPublication) {
+        from components.release
+        // Add additional sourcesJar to artifacts
+        artifact(androidSourcesJar)
+      }
+    }
+    repositories {
+      maven {
+        url = mavenLocal().url
+      }
+    }
+  }
+}
+
+android {
+  compileSdkVersion safeExtGet("compileSdkVersion", 31)
+
+  compileOptions {
+    sourceCompatibility JavaVersion.VERSION_11
+    targetCompatibility JavaVersion.VERSION_11
+  }
+
+  kotlinOptions {
+    jvmTarget = JavaVersion.VERSION_11.majorVersion
+  }
+
+  defaultConfig {
+    minSdkVersion safeExtGet("minSdkVersion", 21)
+    targetSdkVersion safeExtGet("targetSdkVersion", 31)
+    versionCode 31
+    versionName '0.4.0'
+    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
+  }
+  lintOptions {
+    abortOnError false
+  }
+  testOptions {
+    unitTests.includeAndroidResources = true
+  }
+  sourceSets {
+    androidTest.assets.srcDirs += files("$projectDir/src/androidTest/schemas".toString())
+  }
+}
+
+dependencies {
+  implementation project(':expo-json-utils')
+
+  testImplementation 'junit:junit:4.12'
+  testImplementation 'androidx.test:core:1.4.0'
+  testImplementation 'org.mockito:mockito-core:1.10.19'
+  testImplementation 'io.mockk:mockk:1.12.3'
+
+  androidTestImplementation 'androidx.test:runner:1.4.0'
+  androidTestImplementation 'androidx.test:core:1.4.0'
+  androidTestImplementation 'androidx.test:rules:1.4.0'
+  androidTestImplementation 'org.mockito:mockito-android:3.7.7'
+  androidTestImplementation 'io.mockk:mockk-android:1.12.3'
+
+  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${getKotlinVersion()}"
+}
+repositories {
+  mavenCentral()
+}
diff --git a/node_modules/expo-manifests/android/bin/src/androidTest/java/expo/modules/manifests/core/NewManifestTest.kt b/node_modules/expo-manifests/android/bin/src/androidTest/java/expo/modules/manifests/core/NewManifestTest.kt
new file mode 100644
index 0000000..d7542fa
--- /dev/null
+++ b/node_modules/expo-manifests/android/bin/src/androidTest/java/expo/modules/manifests/core/NewManifestTest.kt
@@ -0,0 +1,49 @@
+package expo.modules.manifests.core
+
+import androidx.test.internal.runner.junit4.AndroidJUnit4ClassRunner
+import org.json.JSONObject
+import org.junit.Assert
+import org.junit.Test
+import org.junit.runner.RunWith
+
+@RunWith(AndroidJUnit4ClassRunner::class)
+class NewManifestTest {
+  @Test
+  @Throws(Exception::class)
+  fun testGetSDKVersionNullable_ValidCases() {
+    val runtimeVersion = "exposdk:39.0.0"
+    val manifestJson =
+      "{\"runtimeVersion\":\"$runtimeVersion\"}"
+    val manifest = NewManifest(JSONObject(manifestJson))
+    Assert.assertEquals(manifest.getSDKVersion(), "39.0.0")
+  }
+
+  @Test
+  @Throws(Exception::class)
+  fun testGetSDKVersionNullable_ValidCaseUnversioned() {
+    val runtimeVersion = "exposdk:UNVERSIONED"
+    val manifestJson =
+      "{\"runtimeVersion\":\"$runtimeVersion\"}"
+    val manifest = NewManifest(JSONObject(manifestJson))
+    Assert.assertEquals(manifest.getSDKVersion(), "UNVERSIONED")
+  }
+
+  @Test
+  @Throws(Exception::class)
+  fun testGetSDKVersionNullable_NotSDKRuntimeVersionCases() {
+    val runtimeVersions = listOf(
+      "exposdk:123",
+      "exposdkd:39.0.0",
+      "exposdk:hello",
+      "bexposdk:39.0.0",
+      "exposdk:39.0.0-beta.0",
+      "exposdk:39.0.0-alpha.256"
+    )
+    runtimeVersions.forEach { runtimeVersion ->
+      val manifestJson =
+        "{\"runtimeVersion\":\"$runtimeVersion\"}"
+      val manifest = NewManifest(JSONObject(manifestJson))
+      Assert.assertNull(manifest.getSDKVersion())
+    }
+  }
+}
diff --git a/node_modules/expo-manifests/android/bin/src/main/AndroidManifest.xml b/node_modules/expo-manifests/android/bin/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..78996a7
--- /dev/null
+++ b/node_modules/expo-manifests/android/bin/src/main/AndroidManifest.xml
@@ -0,0 +1,3 @@
+<manifest package="expo.modules.manifests"
+    xmlns:android="http://schemas.android.com/apk/res/android">
+</manifest>
diff --git a/node_modules/expo-manifests/android/bin/src/main/java/expo/modules/manifests/core/BareManifest.kt b/node_modules/expo-manifests/android/bin/src/main/java/expo/modules/manifests/core/BareManifest.kt
new file mode 100644
index 0000000..cce3b3e
--- /dev/null
+++ b/node_modules/expo-manifests/android/bin/src/main/java/expo/modules/manifests/core/BareManifest.kt
@@ -0,0 +1,16 @@
+package expo.modules.manifests.core
+
+import expo.modules.jsonutils.require
+import org.json.JSONException
+import org.json.JSONObject
+
+class BareManifest(json: JSONObject) : BaseLegacyManifest(json) {
+  /**
+   * A UUID for this manifest.
+   */
+  @Throws(JSONException::class)
+  fun getID(): String = json.require("id")
+
+  @Throws(JSONException::class)
+  fun getCommitTimeLong(): Long = json.require("commitTime")
+}
diff --git a/node_modules/expo-manifests/android/bin/src/main/java/expo/modules/manifests/core/BaseLegacyManifest.kt b/node_modules/expo-manifests/android/bin/src/main/java/expo/modules/manifests/core/BaseLegacyManifest.kt
new file mode 100644
index 0000000..92bbbdd
--- /dev/null
+++ b/node_modules/expo-manifests/android/bin/src/main/java/expo/modules/manifests/core/BaseLegacyManifest.kt
@@ -0,0 +1,36 @@
+package expo.modules.manifests.core
+
+import expo.modules.jsonutils.getNullable
+import expo.modules.jsonutils.require
+import org.json.JSONArray
+import org.json.JSONException
+import org.json.JSONObject
+
+abstract class BaseLegacyManifest(json: JSONObject) : Manifest(json) {
+  override fun getStableLegacyID(): String = json.getNullable("originalFullName") ?: getLegacyID()
+
+  override fun getScopeKey(): String = json.getNullable("scopeKey") ?: getStableLegacyID()
+
+  override fun getEASProjectID(): String? = json.getNullable("projectId")
+
+  override fun getAssets(): JSONArray? = json.getNullable("assets")
+
+  @Throws(JSONException::class)
+  override fun getBundleURL(): String = json.require("bundleUrl")
+
+  override fun getSDKVersion(): String? = json.getNullable("sdkVersion")
+
+  override fun getExpoGoConfigRootObject(): JSONObject? {
+    return json
+  }
+
+  override fun getExpoClientConfigRootObject(): JSONObject? {
+    return json
+  }
+
+  override fun getSlug(): String? = json.getNullable("slug")
+
+  override fun getAppKey(): String? = json.getNullable("appKey")
+
+  fun getCommitTime(): String? = json.getNullable("commitTime")
+}
diff --git a/node_modules/expo-manifests/android/bin/src/main/java/expo/modules/manifests/core/LegacyManifest.kt b/node_modules/expo-manifests/android/bin/src/main/java/expo/modules/manifests/core/LegacyManifest.kt
new file mode 100644
index 0000000..b0f48ca
--- /dev/null
+++ b/node_modules/expo-manifests/android/bin/src/main/java/expo/modules/manifests/core/LegacyManifest.kt
@@ -0,0 +1,22 @@
+package expo.modules.manifests.core
+
+import expo.modules.jsonutils.getNullable
+import expo.modules.jsonutils.require
+import org.json.JSONArray
+import org.json.JSONException
+import org.json.JSONObject
+
+open class LegacyManifest(json: JSONObject) : BaseLegacyManifest(json) {
+  @Throws(JSONException::class)
+  fun getBundleKey(): String? = json.getNullable("bundleKey")
+
+  @Throws(JSONException::class)
+  fun getReleaseId(): String = json.require("releaseId")
+
+  fun getRuntimeVersion(): String? = json.getNullable("runtimeVersion")
+
+  @Throws(JSONException::class)
+  fun getBundledAssets(): JSONArray? = json.getNullable("bundledAssets")
+
+  open fun getAssetUrlOverride(): String? = json.getNullable("assetUrlOverride")
+}
diff --git a/node_modules/expo-manifests/android/bin/src/main/java/expo/modules/manifests/core/Manifest.kt b/node_modules/expo-manifests/android/bin/src/main/java/expo/modules/manifests/core/Manifest.kt
new file mode 100644
index 0000000..738370e
--- /dev/null
+++ b/node_modules/expo-manifests/android/bin/src/main/java/expo/modules/manifests/core/Manifest.kt
@@ -0,0 +1,238 @@
+package expo.modules.manifests.core
+
+import expo.modules.jsonutils.getNullable
+import expo.modules.jsonutils.require
+import org.json.JSONArray
+import org.json.JSONException
+import org.json.JSONObject
+
+interface InternalJSONMutator {
+  @Throws(JSONException::class)
+  fun updateJSON(json: JSONObject)
+}
+
+abstract class Manifest(protected val json: JSONObject) {
+  @Deprecated(message = "Strive for manifests to be immutable")
+  @Throws(JSONException::class)
+  fun mutateInternalJSONInPlace(internalJSONMutator: InternalJSONMutator) {
+    json.apply {
+      internalJSONMutator.updateJSON(this)
+    }
+  }
+
+  @Deprecated(message = "Prefer to use specific field getters")
+  fun getRawJson(): JSONObject = json
+
+  @Deprecated(message = "Prefer to use specific field getters")
+  override fun toString(): String {
+    return getRawJson().toString()
+  }
+
+  /**
+   * A best-effort immutable legacy ID for this experience. Stable through project transfers.
+   * Should be used for calling Expo and EAS APIs during their transition to projectId.
+   */
+  @Deprecated(message = "Prefer scopeKey or projectId depending on use case")
+  abstract fun getStableLegacyID(): String?
+
+  /**
+   * A stable immutable scoping key for this experience. Should be used for scoping data on the
+   * client for this project when running in Expo Go.
+   */
+  @Throws(JSONException::class)
+  abstract fun getScopeKey(): String
+
+  /**
+   * A stable UUID for this EAS project. Should be used to call EAS APIs.
+   */
+  abstract fun getEASProjectID(): String?
+
+  /**
+   * The legacy ID of this experience.
+   * - For Bare manifests, formatted as a UUID.
+   * - For Legacy manifests, formatted as @owner/slug. Not stable through project transfers.
+   * - For New manifests, currently incorrect value is UUID.
+   *
+   * Use this in cases where an identifier of the current manifest is needed (experience loading for example).
+   * Use getScopeKey for cases where a stable key is needed to scope data to this experience.
+   * Use getEASProjectID for cases where a stable UUID identifier of the experience is needed to identify over EAS APIs.
+   * Use getStableLegacyID for cases where a stable legacy format identifier of the experience is needed (experience scoping for example).
+   */
+  @Throws(JSONException::class)
+  @Deprecated(message = "Prefer scopeKey or projectId depending on use case")
+  fun getLegacyID(): String = json.require("id")
+
+  @Throws(JSONException::class)
+  abstract fun getBundleURL(): String
+
+  @Throws(JSONException::class)
+  fun getRevisionId(): String = getExpoClientConfigRootObject()!!.require("revisionId")
+
+  fun getMetadata(): JSONObject? = json.getNullable("metadata")
+
+  abstract fun getSDKVersion(): String?
+
+  abstract fun getAssets(): JSONArray?
+
+  abstract fun getExpoGoConfigRootObject(): JSONObject?
+  abstract fun getExpoClientConfigRootObject(): JSONObject?
+
+  fun isDevelopmentMode(): Boolean {
+    val expoGoRootObject = getExpoGoConfigRootObject() ?: return false
+    return try {
+      expoGoRootObject.has("developer") &&
+        expoGoRootObject.getNullable<JSONObject>("packagerOpts")?.getNullable("dev") ?: false
+    } catch (e: JSONException) {
+      false
+    }
+  }
+
+  fun isDevelopmentSilentLaunch(): Boolean {
+    val expoGoRootObject = getExpoGoConfigRootObject() ?: return false
+    return expoGoRootObject.getNullable<JSONObject>("developmentClient")?.getNullable("silentLaunch") ?: false
+  }
+
+  fun isUsingDeveloperTool(): Boolean {
+    val expoGoRootObject = getExpoGoConfigRootObject() ?: return false
+    return expoGoRootObject.getNullable<JSONObject>("developer")?.has("tool") ?: false
+  }
+
+  abstract fun getSlug(): String?
+
+  fun getDebuggerHost(): String = getExpoGoConfigRootObject()!!.require("debuggerHost")
+  fun getMainModuleName(): String = getExpoGoConfigRootObject()!!.require("mainModuleName")
+  fun getLogUrl(): String? = getExpoGoConfigRootObject()?.getNullable("logUrl")
+  fun getHostUri(): String? = getExpoClientConfigRootObject()?.getNullable("hostUri")
+
+  fun isVerified(): Boolean = json.getNullable("isVerified") ?: false
+
+  abstract fun getAppKey(): String?
+
+  fun getName(): String? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    return expoClientConfig.getNullable("name")
+  }
+
+  fun getVersion(): String? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    return expoClientConfig.getNullable("version")
+  }
+
+  fun getUpdatesInfo(): JSONObject? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    return expoClientConfig.getNullable("updates")
+  }
+
+  fun getPrimaryColor(): String? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    return expoClientConfig.getNullable("primaryColor")
+  }
+
+  fun getOrientation(): String? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    return expoClientConfig.getNullable("orientation")
+  }
+
+  fun getAndroidKeyboardLayoutMode(): String? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    val android = expoClientConfig.getNullable<JSONObject>("android") ?: return null
+    return android.getNullable("softwareKeyboardLayoutMode")
+  }
+
+  fun getAndroidUserInterfaceStyle(): String? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    return try {
+      expoClientConfig.require<JSONObject>("android").require("userInterfaceStyle")
+    } catch (e: JSONException) {
+      expoClientConfig.getNullable("userInterfaceStyle")
+    }
+  }
+
+  fun getAndroidStatusBarOptions(): JSONObject? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    return expoClientConfig.getNullable("androidStatusBar")
+  }
+
+  fun getAndroidBackgroundColor(): String? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    return try {
+      expoClientConfig.require<JSONObject>("android").require("backgroundColor")
+    } catch (e: JSONException) {
+      expoClientConfig.getNullable("backgroundColor")
+    }
+  }
+
+  fun getAndroidNavigationBarOptions(): JSONObject? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    return expoClientConfig.getNullable("androidNavigationBar")
+  }
+
+  val jsEngine: String by lazy {
+    val expoClientConfig = getExpoClientConfigRootObject()
+    expoClientConfig
+      ?.getNullable<JSONObject>("android")?.getNullable<String>("jsEngine") ?: expoClientConfig?.getNullable<String>("jsEngine") ?: "jsc"
+  }
+
+  fun getIconUrl(): String? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    return expoClientConfig.getNullable("iconUrl")
+  }
+
+  fun getNotificationPreferences(): JSONObject? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    return expoClientConfig.getNullable("notification")
+  }
+
+  fun getAndroidSplashInfo(): JSONObject? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    return expoClientConfig.getNullable<JSONObject>("android")?.getNullable("splash")
+  }
+
+  fun getRootSplashInfo(): JSONObject? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    return expoClientConfig.getNullable("splash")
+  }
+
+  fun getAndroidGoogleServicesFile(): String? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    val android = expoClientConfig.getNullable<JSONObject>("android") ?: return null
+    return android.getNullable("googleServicesFile")
+  }
+
+  fun getAndroidPackageName(): String? {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return null
+    val android = expoClientConfig.getNullable<JSONObject>("android") ?: return null
+    return android.getNullable("packageName")
+  }
+
+  fun shouldUseNextNotificationsApi(): Boolean {
+    val expoClientConfig = getExpoClientConfigRootObject() ?: return false
+    val android: JSONObject = expoClientConfig.getNullable<JSONObject>("android") ?: return false
+    return android.getNullable("useNextNotificationsApi") ?: false
+  }
+
+  @Throws(JSONException::class)
+  fun getFacebookAppId(): String = getExpoClientConfigRootObject()!!.require("facebookAppId")
+
+  @Throws(JSONException::class)
+  fun getFacebookApplicationName(): String = getExpoClientConfigRootObject()!!.require("facebookDisplayName")
+
+  @Throws(JSONException::class)
+  fun getFacebookAutoInitEnabled(): Boolean = getExpoClientConfigRootObject()!!.require("facebookAutoInitEnabled")
+
+  companion object {
+    @JvmStatic fun fromManifestJson(manifestJson: JSONObject): Manifest {
+      return when {
+        manifestJson.has("releaseId") -> {
+          LegacyManifest(manifestJson)
+        }
+        manifestJson.has("metadata") -> {
+          NewManifest(manifestJson)
+        }
+        else -> {
+          BareManifest(manifestJson)
+        }
+      }
+    }
+  }
+}
diff --git a/node_modules/expo-manifests/android/bin/src/main/java/expo/modules/manifests/core/NewManifest.kt b/node_modules/expo-manifests/android/bin/src/main/java/expo/modules/manifests/core/NewManifest.kt
new file mode 100644
index 0000000..e34812c
--- /dev/null
+++ b/node_modules/expo-manifests/android/bin/src/main/java/expo/modules/manifests/core/NewManifest.kt
@@ -0,0 +1,73 @@
+package expo.modules.manifests.core
+
+import expo.modules.jsonutils.getNullable
+import expo.modules.jsonutils.require
+import org.json.JSONArray
+import org.json.JSONException
+import org.json.JSONObject
+import java.util.regex.Matcher
+import java.util.regex.Pattern
+
+class NewManifest(json: JSONObject) : Manifest(json) {
+  /**
+   * An ID representing this manifest, not the ID for the experience.
+   */
+  @Throws(JSONException::class)
+  fun getID(): String = json.require("id")
+
+  override fun getStableLegacyID(): String? = null
+
+  @Throws(JSONException::class)
+  override fun getScopeKey(): String {
+    return json.require<JSONObject>("extra").require("scopeKey")
+  }
+
+  override fun getEASProjectID(): String? {
+    val easConfig = getExtra()?.getNullable<JSONObject>("eas") ?: return null
+    return easConfig.getNullable("projectId")
+  }
+
+  @Throws(JSONException::class)
+  fun getRuntimeVersion(): String = json.require("runtimeVersion")
+
+  @Throws(JSONException::class)
+  override fun getBundleURL(): String = getLaunchAsset().require("url")
+
+  override fun getSDKVersion(): String? {
+    val runtimeVersion = getRuntimeVersion()
+    if (runtimeVersion == "exposdk:UNVERSIONED") {
+      return "UNVERSIONED"
+    }
+
+    val expoSDKRuntimeVersionRegex: Pattern = Pattern.compile("^exposdk:(\\d+\\.\\d+\\.\\d+)$")
+    val expoSDKRuntimeVersionMatch: Matcher = expoSDKRuntimeVersionRegex.matcher(runtimeVersion)
+    if (expoSDKRuntimeVersionMatch.find()) {
+      return expoSDKRuntimeVersionMatch.group(1)!!
+    }
+    return null
+  }
+
+  @Throws(JSONException::class)
+  fun getLaunchAsset(): JSONObject = json.require("launchAsset")
+
+  override fun getAssets(): JSONArray? = json.getNullable("assets")
+
+  @Throws(JSONException::class)
+  fun getCreatedAt(): String = json.require("createdAt")
+
+  override fun getExpoGoConfigRootObject(): JSONObject? {
+    return getExtra()?.getNullable("expoGo")
+  }
+
+  override fun getExpoClientConfigRootObject(): JSONObject? {
+    return getExtra()?.getNullable("expoClient")
+  }
+
+  override fun getSlug(): String? = null
+
+  override fun getAppKey(): String? = null
+
+  private fun getExtra(): JSONObject? {
+    return json.getNullable("extra")
+  }
+}
